package com.yy.yylife.entity;

import java.util.ArrayList;
import java.util.List;

public class UserCriteria {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table user
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table user
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table user
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table user
     *
     * @mbggenerated
     */
    protected Integer limitStart;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table user
     *
     * @mbggenerated
     */
    protected Integer limitEnd;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated
     */
    public UserCriteria() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated
     */
    public void setLimitStart(Integer limitStart) {
        this.limitStart=limitStart;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated
     */
    public Integer getLimitStart() {
        return limitStart;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated
     */
    public void setLimitEnd(Integer limitEnd) {
        this.limitEnd=limitEnd;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated
     */
    public Integer getLimitEnd() {
        return limitEnd;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table user
     *
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andUidIsNull() {
            addCriterion("uid is null");
            return (Criteria) this;
        }

        public Criteria andUidIsNotNull() {
            addCriterion("uid is not null");
            return (Criteria) this;
        }

        public Criteria andUidEqualTo(Long value) {
            addCriterion("uid =", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidNotEqualTo(Long value) {
            addCriterion("uid <>", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidGreaterThan(Long value) {
            addCriterion("uid >", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidGreaterThanOrEqualTo(Long value) {
            addCriterion("uid >=", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidLessThan(Long value) {
            addCriterion("uid <", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidLessThanOrEqualTo(Long value) {
            addCriterion("uid <=", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidIn(List<Long> values) {
            addCriterion("uid in", values, "uid");
            return (Criteria) this;
        }

        public Criteria andUidNotIn(List<Long> values) {
            addCriterion("uid not in", values, "uid");
            return (Criteria) this;
        }

        public Criteria andUidBetween(Long value1, Long value2) {
            addCriterion("uid between", value1, value2, "uid");
            return (Criteria) this;
        }

        public Criteria andUidNotBetween(Long value1, Long value2) {
            addCriterion("uid not between", value1, value2, "uid");
            return (Criteria) this;
        }

        public Criteria andLifeValueIsNull() {
            addCriterion("lifeValue is null");
            return (Criteria) this;
        }

        public Criteria andLifeValueIsNotNull() {
            addCriterion("lifeValue is not null");
            return (Criteria) this;
        }

        public Criteria andLifeValueEqualTo(Long value) {
            addCriterion("lifeValue =", value, "lifeValue");
            return (Criteria) this;
        }

        public Criteria andLifeValueNotEqualTo(Long value) {
            addCriterion("lifeValue <>", value, "lifeValue");
            return (Criteria) this;
        }

        public Criteria andLifeValueGreaterThan(Long value) {
            addCriterion("lifeValue >", value, "lifeValue");
            return (Criteria) this;
        }

        public Criteria andLifeValueGreaterThanOrEqualTo(Long value) {
            addCriterion("lifeValue >=", value, "lifeValue");
            return (Criteria) this;
        }

        public Criteria andLifeValueLessThan(Long value) {
            addCriterion("lifeValue <", value, "lifeValue");
            return (Criteria) this;
        }

        public Criteria andLifeValueLessThanOrEqualTo(Long value) {
            addCriterion("lifeValue <=", value, "lifeValue");
            return (Criteria) this;
        }

        public Criteria andLifeValueIn(List<Long> values) {
            addCriterion("lifeValue in", values, "lifeValue");
            return (Criteria) this;
        }

        public Criteria andLifeValueNotIn(List<Long> values) {
            addCriterion("lifeValue not in", values, "lifeValue");
            return (Criteria) this;
        }

        public Criteria andLifeValueBetween(Long value1, Long value2) {
            addCriterion("lifeValue between", value1, value2, "lifeValue");
            return (Criteria) this;
        }

        public Criteria andLifeValueNotBetween(Long value1, Long value2) {
            addCriterion("lifeValue not between", value1, value2, "lifeValue");
            return (Criteria) this;
        }

        public Criteria andGrapeValueIsNull() {
            addCriterion("grapeValue is null");
            return (Criteria) this;
        }

        public Criteria andGrapeValueIsNotNull() {
            addCriterion("grapeValue is not null");
            return (Criteria) this;
        }

        public Criteria andGrapeValueEqualTo(Long value) {
            addCriterion("grapeValue =", value, "grapeValue");
            return (Criteria) this;
        }

        public Criteria andGrapeValueNotEqualTo(Long value) {
            addCriterion("grapeValue <>", value, "grapeValue");
            return (Criteria) this;
        }

        public Criteria andGrapeValueGreaterThan(Long value) {
            addCriterion("grapeValue >", value, "grapeValue");
            return (Criteria) this;
        }

        public Criteria andGrapeValueGreaterThanOrEqualTo(Long value) {
            addCriterion("grapeValue >=", value, "grapeValue");
            return (Criteria) this;
        }

        public Criteria andGrapeValueLessThan(Long value) {
            addCriterion("grapeValue <", value, "grapeValue");
            return (Criteria) this;
        }

        public Criteria andGrapeValueLessThanOrEqualTo(Long value) {
            addCriterion("grapeValue <=", value, "grapeValue");
            return (Criteria) this;
        }

        public Criteria andGrapeValueIn(List<Long> values) {
            addCriterion("grapeValue in", values, "grapeValue");
            return (Criteria) this;
        }

        public Criteria andGrapeValueNotIn(List<Long> values) {
            addCriterion("grapeValue not in", values, "grapeValue");
            return (Criteria) this;
        }

        public Criteria andGrapeValueBetween(Long value1, Long value2) {
            addCriterion("grapeValue between", value1, value2, "grapeValue");
            return (Criteria) this;
        }

        public Criteria andGrapeValueNotBetween(Long value1, Long value2) {
            addCriterion("grapeValue not between", value1, value2, "grapeValue");
            return (Criteria) this;
        }

        public Criteria andScoreIsNull() {
            addCriterion("score is null");
            return (Criteria) this;
        }

        public Criteria andScoreIsNotNull() {
            addCriterion("score is not null");
            return (Criteria) this;
        }

        public Criteria andScoreEqualTo(Long value) {
            addCriterion("score =", value, "score");
            return (Criteria) this;
        }

        public Criteria andScoreNotEqualTo(Long value) {
            addCriterion("score <>", value, "score");
            return (Criteria) this;
        }

        public Criteria andScoreGreaterThan(Long value) {
            addCriterion("score >", value, "score");
            return (Criteria) this;
        }

        public Criteria andScoreGreaterThanOrEqualTo(Long value) {
            addCriterion("score >=", value, "score");
            return (Criteria) this;
        }

        public Criteria andScoreLessThan(Long value) {
            addCriterion("score <", value, "score");
            return (Criteria) this;
        }

        public Criteria andScoreLessThanOrEqualTo(Long value) {
            addCriterion("score <=", value, "score");
            return (Criteria) this;
        }

        public Criteria andScoreIn(List<Long> values) {
            addCriterion("score in", values, "score");
            return (Criteria) this;
        }

        public Criteria andScoreNotIn(List<Long> values) {
            addCriterion("score not in", values, "score");
            return (Criteria) this;
        }

        public Criteria andScoreBetween(Long value1, Long value2) {
            addCriterion("score between", value1, value2, "score");
            return (Criteria) this;
        }

        public Criteria andScoreNotBetween(Long value1, Long value2) {
            addCriterion("score not between", value1, value2, "score");
            return (Criteria) this;
        }

        public Criteria andCharmValueIsNull() {
            addCriterion("charmValue is null");
            return (Criteria) this;
        }

        public Criteria andCharmValueIsNotNull() {
            addCriterion("charmValue is not null");
            return (Criteria) this;
        }

        public Criteria andCharmValueEqualTo(Long value) {
            addCriterion("charmValue =", value, "charmValue");
            return (Criteria) this;
        }

        public Criteria andCharmValueNotEqualTo(Long value) {
            addCriterion("charmValue <>", value, "charmValue");
            return (Criteria) this;
        }

        public Criteria andCharmValueGreaterThan(Long value) {
            addCriterion("charmValue >", value, "charmValue");
            return (Criteria) this;
        }

        public Criteria andCharmValueGreaterThanOrEqualTo(Long value) {
            addCriterion("charmValue >=", value, "charmValue");
            return (Criteria) this;
        }

        public Criteria andCharmValueLessThan(Long value) {
            addCriterion("charmValue <", value, "charmValue");
            return (Criteria) this;
        }

        public Criteria andCharmValueLessThanOrEqualTo(Long value) {
            addCriterion("charmValue <=", value, "charmValue");
            return (Criteria) this;
        }

        public Criteria andCharmValueIn(List<Long> values) {
            addCriterion("charmValue in", values, "charmValue");
            return (Criteria) this;
        }

        public Criteria andCharmValueNotIn(List<Long> values) {
            addCriterion("charmValue not in", values, "charmValue");
            return (Criteria) this;
        }

        public Criteria andCharmValueBetween(Long value1, Long value2) {
            addCriterion("charmValue between", value1, value2, "charmValue");
            return (Criteria) this;
        }

        public Criteria andCharmValueNotBetween(Long value1, Long value2) {
            addCriterion("charmValue not between", value1, value2, "charmValue");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table user
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table user
     *
     * @mbggenerated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}